//https://leetcode.com/explore/learn/card/queue-stack/232/practical-application-stack/1389/
class Solution {
    HashMap<String, Integer> map = new HashMap<>();
    public int findTargetSumWays(int[] nums, int target) {
     return genSol(nums,target,0,0); 
    }
    
    private int genSol(int[] nums, int target, int sum, int index){
      //use memoization to keep track of previous count for a given sum#index. 
        if(map.containsKey(sum+"#"+index)){
            return map.get(sum+"#"+index);
        }
        if(index==nums.length){
            if(sum==target){
              return 1;
            }
            return 0;
        }
        int count=0;
        
        count+=genSol(nums,target,sum+nums[index],index+1);  
        count+=genSol(nums,target,sum-nums[index],index+1); 
        
        map.put((sum+"#"+index),count);
      
        return count;
    }
}
