//https://leetcode.com/problems/number-of-connected-components-in-an-undirected-graph/
class Solution {
    public int countComponents(int n, int[][] edges) {
        boolean[] visited = new boolean[n];
        HashMap<Integer,List<Integer>> graph= new HashMap();
        
        for(int i=0; i<n;i++){
            List<Integer> n1 = new ArrayList();
            graph.put(i,n1);
        }
        
        for(int i=0;i<edges.length;i++){
            List<Integer> nei= graph.get(edges[i][0]);
            nei.add(edges[i][1]);
            graph.put(edges[i][0],nei);
            
            
            List<Integer> n1 = graph.get(edges[i][1]);
            n1.add(edges[i][0]);
            graph.put(edges[i][1],n1);
        }
        
        int res=0;
        for(int i=0; i<n;i++){
            if(!visited[i]){
                dfs(visited,graph, i);
                res++;
            }
        }
        
        return res;
    }
    
    private void dfs(boolean[] visited, HashMap<Integer,List<Integer>> graph, int node){
        Stack<Integer> stack = new Stack();
        stack.push(node);
        visited[node] = true;
        while(!stack.isEmpty()){
                int val = stack.pop();
                List<Integer> nei = graph.get(val);
                for(int v : nei){
                       if(!visited[v]){
                           stack.push(v);
                           visited[v] = true;
                       } 
                
                } 
        }
    }
}
