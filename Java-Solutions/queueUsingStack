//https://leetcode.com/explore/item/1386

//Sol-1 Using 2 Stack

class MyQueue {

    /** Initialize your data structure here. */
        private Stack<Integer> in = new Stack<>();
        private Stack<Integer> out = new Stack<>();
        


    /** Push element x to the back of queue. */
    public void push(int x) {
        in.push(x);
    }

    /** Removes the element from in front of queue and returns that element. */
    public int pop() {
        in2out();
        return out.pop();

    }

    /** Get the front element. */
    public int peek() {
        in2out();
        return out.peek();

    }

    /** Returns whether the queue is empty. */
    public boolean empty() {
        return in.isEmpty() && out.isEmpty();

    }
    
    private void in2out(){
        if(out.isEmpty()){
            while(!in.isEmpty()){
                out.push(in.pop());
            }
        }
    }
}

//Sol-2 Using 1 Stack
class MyQueue {
    
        int[] stack = new int[100];
        int head=-1;
        int last=0;

    public MyQueue() {
    }
    
    /** Push element x to the back of queue. */
    public void push(int x) {
        if(head==-1){
            stack[++head]=x;
        } else {
            stack[++last]=x;    
        }
        
    }
    
    /** Removes the element from in front of queue and returns that element. */
    public int pop() {
        return stack[head++];
    }
    
    /** Get the front element. */
    public int peek() {
        return stack[head];
    }
    
    /** Returns whether the queue is empty. */
    public boolean empty() {
        if(head== -1 || head>last) return true;
        
        return false;
    }
}


