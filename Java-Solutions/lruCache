//https://leetcode.com/problems/lru-cache/

class LRUCache {
    class Node{
        Node prev;
        Node next;
        int key;
        int val;
        public Node(){}
        public Node(int key, int value){
            this.key = key;
            this.val = value;
        } 
    }
    int capacity;
    Map<Integer, Node> map;
    Node head;
    Node tail;

    public LRUCache(int capacity) {
        this.capacity = capacity;
        map = new HashMap<>();
        head = new Node();
        tail = new Node();
        head.next = tail;
        tail.prev = head;
    }
    
    public int get(int key) {
        if(!map.containsKey(key)) return -1;
        Node node = map.get(key);
        delete(node);
        addhead(node);
        return node.val;
    }
    
    public void put(int key, int value) {
        if(capacity <= map.size() && !map.containsKey(key)){
            removetail();
        }
        
        if(map.containsKey(key)){
            Node node = map.get(key);
            node.val = value;
            delete(node);
            addhead(node);
        } else {
            Node node = new Node(key, value);
            map.put(key, node);
            addhead(node);
        }
              
    }
    
    private void delete(Node node){
        Node tmp = node.prev;
        tmp.next = node.next;
        node.next.prev = tmp;
        node.prev = null;
        node.next = null;
    }
    
    private void addhead(Node node){
        Node tmp = head.next;
        head.next = node;
        node.next = tmp;
        node.prev = head;
        tmp.prev = node;
    }
    
    private void removetail(){
        Node tmp = tail.prev;
        tail.prev = tmp.prev;
        tail.prev.next = tail;
        tmp.prev = null;
        tmp.next = null;
        map.remove(tmp.key);
    }
}
