//

//Sol-1: DFS- While
class Solution {
    public boolean canVisitAllRooms(List<List<Integer>> rooms) {
        HashSet<Integer> visited = new HashSet();
        Stack<Integer> stack = new Stack();
        stack.push(0);
       
        while(!stack.isEmpty()){
            int room = stack.pop();
            if(!visited.contains(room)){
                visited.add(room);
                List<Integer> keys = rooms.get(room);
                for(int key : keys){
                    stack.push(key);
                }
            }
        }
        
        if(visited.size()!=rooms.size()){
            return false;
        }
        
        return true;
    }
}

//Sol-2 : Recursion DFS 
class Solution {
    
    Set<Integer> visited = new HashSet();
    public boolean canVisitAllRooms(List<List<Integer>> rooms) {
        
        
        dfs(rooms, 0);
        if(visited.size() == rooms.size())
            return true;
        return false;
    }
    
    
    public void dfs(List<List<Integer>> rooms, int i)
    {
        if(!visited.contains(i))
        {
            visited.add(i);
            for(int key : rooms.get(i))
            {
                dfs(rooms, key);
            }
        }
        
        return;
    }
}
